@rendermode InteractiveServer
@page "/weather"
@attribute [StreamRendering]

<PageTitle>Weather</PageTitle>

<h1>Weather</h1>

<p>This component demonstrates showing data.</p>

<style>
    .spacing-bottom {
        margin-bottom: 20px;
    }
</style>

@if (forecastsFiltered == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <input class="form-control" placeholder="Wpisz nazwę do filtrowania" @oninput="Input" />
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecastsFiltered)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
            
        </tbody>
        
        
    </table>

    <p role=" status "> Number of warm days : @numberOfWarmDays </p>
    <button class="btn btn-primary"  @onclick="() => FilterBelow15()">Filtruj dni poniżej 15°C</button>
    <button class="btn btn-secondary"  @onclick="RestoreForecasts">Przywróć oryginalną listę</button>
    ;
}

@code {
    private WeatherForecast[]? forecasts;
    private WeatherForecast[]? forecastsFiltered;
    private int numberOfWarmDays = 0;
    private bool isFilteredBelow15 = false;

    protected override async Task OnInitializedAsync()
    {
        // Simulate asynchronous loading to demonstrate streaming rendering
        await Task.Delay(500);

        var startDate = DateOnly.FromDateTime(DateTime.Now);
        var summaries = new[] { "Freezing", "Bracing", "Chilly", "Cool", "Mild", "Warm", "Balmy", "Hot", "Sweltering", "Scorching" };
        forecasts = Enumerable.Range(1, 10).Select(index => new WeatherForecast
        {
            Date = startDate.AddDays(index),
            TemperatureC = Random.Shared.Next(-20, 55),
            Summary = summaries[Random.Shared.Next(summaries.Length)]

        }).ToArray();
        foreach(WeatherForecast forecast in forecasts)
        {
            if (forecast.TemperatureC > 15) numberOfWarmDays++;
        }
        forecastsFiltered = forecasts;
    }

    private class WeatherForecast
    {
        public DateOnly Date { get; set; }
        public int TemperatureC { get; set; }
        public string? Summary { get; set; }
        public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);
    }
    private void FilterBelow15()
    {
        forecastsFiltered=  forecastsFiltered.Where(forecast => forecast.TemperatureC < 15).ToArray();
        isFilteredBelow15 = true;
    }
    private void RestoreForecasts()
    {
        forecastsFiltered = forecasts;
        isFilteredBelow15 = false;
    }
    private async Task Input(ChangeEventArgs arg)
    {
        string searchText = arg.Value.ToString();
        await Task.Run(() =>
        {
            if (searchText == "" && isFilteredBelow15 == true) { FilterBelow15(); } else if(searchText == "" && isFilteredBelow15 == false) { RestoreForecasts(); };
            forecastsFiltered = forecastsFiltered.Where(item => item.Summary.Contains(searchText, StringComparison.OrdinalIgnoreCase)).ToArray();
        });
        
    }
}
